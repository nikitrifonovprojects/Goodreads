// <auto-generated />
using System;
using Goodreads.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Goodreads.Data.Migrations
{
    [DbContext(typeof(GoodreadsContext))]
    [Migration("20180628105424_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Goodreads.Data.Models.Authors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorData");

                    b.Property<string>("AuthorUrl");

                    b.Property<int?>("BookId");

                    b.Property<string>("Born")
                        .IsRequired();

                    b.Property<string>("Influences");

                    b.Property<DateTime>("MemberSince");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Twitter");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AwardId");

                    b.Property<int?>("BookId");

                    b.Property<byte[]>("Cover");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("EditionLanguage");

                    b.Property<string>("ISBN")
                        .IsRequired();

                    b.Property<string>("LiteraryAwards");

                    b.Property<string>("OriginalTitle");

                    b.Property<string>("Published")
                        .IsRequired();

                    b.Property<int?>("RatingId");

                    b.Property<string>("Series");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("BookId");

                    b.HasIndex("RatingId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorsId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorsId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Pictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId");

                    b.Property<byte[]>("PictureFile")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Authors", b =>
                {
                    b.HasOne("Goodreads.Data.Models.Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Book", b =>
                {
                    b.HasOne("Goodreads.Data.Models.Award")
                        .WithMany("WinnerBooks")
                        .HasForeignKey("AwardId");

                    b.HasOne("Goodreads.Data.Models.Book")
                        .WithMany("OtherEditions")
                        .HasForeignKey("BookId");

                    b.HasOne("Goodreads.Data.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Character", b =>
                {
                    b.HasOne("Goodreads.Data.Models.Book")
                        .WithMany("Charcters")
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Genres", b =>
                {
                    b.HasOne("Goodreads.Data.Models.Authors")
                        .WithMany("Genre")
                        .HasForeignKey("AuthorsId");
                });

            modelBuilder.Entity("Goodreads.Data.Models.Pictures", b =>
                {
                    b.HasOne("Goodreads.Data.Models.Character")
                        .WithMany("Gallery")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
